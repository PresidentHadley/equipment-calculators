'use client'

import { useState, useEffect, useCallback } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import { useDebouncedCallback } from 'use-debounce'
import { motion, AnimatePresence } from 'framer-motion'
import { Calculator, TrendingUp, BarChart3, Target } from 'lucide-react'

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { Slider } from '@/components/ui/slider'
import { LoadingSpinner } from '@/components/ui/loading-spinner'

import { 
  calculateROI,
  formatCurrency,
  formatPercentage 
} from '@/lib/utils'
import type { ROICalculatorResults } from '@/types/calculator'

const roiSchema = z.object({
  equipmentCost: z.number().min(1000).max(10000000),
  monthlyRevenue: z.number().min(0).max(1000000),
  monthlyExpenses: z.number().min(0).max(1000000),
  termMonths: z.number().min(12).max(120),
  equipmentType: z.string().min(1)
})

type ROIFormData = z.infer<typeof roiSchema>

const equipmentTypes = [
  'Construction Equipment',
  'Medical Equipment', 
  'Restaurant Equipment',
  'Manufacturing Equipment',
  'Trucks & Vehicles',
  'Agricultural Equipment',
  'Office Equipment',
  'Technology Equipment',
  'Other'
]

interface EquipmentROICalculatorProps {
  onResultsChange?: (results: ROICalculatorResults | null) => void
  className?: string
  defaults?: Partial<ROIFormData>
}

export function EquipmentROICalculator({ onResultsChange, className, defaults }: EquipmentROICalculatorProps) {
  const [results, setResults] = useState<ROICalculatorResults | null>(null)
  const [isCalculating] = useState(false)
  const [showProjections, setShowProjections] = useState(false)

  const { 
    register, 
    watch, 
    setValue, 
    formState: { errors },
    getValues 
  } = useForm<ROIFormData>({
    resolver: zodResolver(roiSchema),
    defaultValues: {
      equipmentCost: 100000,
      monthlyRevenue: 15000, // Revenue generated by equipment
      monthlyExpenses: 5000,  // Operating expenses for equipment
      termMonths: 60,
      equipmentType: 'Construction Equipment',
      ...(defaults ?? {})
    }
  })

  const watchedValues = watch()

  const calculateResults = useCallback((values: ROIFormData) => {
    try {
      roiSchema.parse(values)
      
      const roiCalc = calculateROI(
        values.equipmentCost,
        values.monthlyRevenue,
        values.monthlyExpenses,
        values.termMonths
      )
      
      // Calculate break-even month (when cumulative profit equals initial investment)
      const monthlyProfit = values.monthlyRevenue - values.monthlyExpenses
      const breakEvenMonth = monthlyProfit > 0 ? Math.ceil(values.equipmentCost / monthlyProfit) : 0
      
      return {
        ...roiCalc,
        breakEvenMonth
      }
    } catch {
      return null
    }
  }, [])

  const debouncedCalculate = useDebouncedCallback(() => {
    const values = getValues()
    const calculationResults = calculateResults(values)
    
    if (calculationResults) {
      setResults(calculationResults)
      onResultsChange?.(calculationResults)
    } else {
      setResults(null)
      onResultsChange?.(null)
    }
  }, 150)

  useEffect(() => {
    debouncedCalculate()
  }, [watchedValues.equipmentCost, watchedValues.monthlyRevenue, watchedValues.monthlyExpenses, watchedValues.termMonths, debouncedCalculate])

  const monthlyProfit = watchedValues.monthlyRevenue - watchedValues.monthlyExpenses
  const annualProfit = monthlyProfit * 12

  // Generate month-by-month projections for visualization
  const generateProjections = (): Array<{
    month: number
    monthlyProfit: number
    cumulativeProfit: number
    isBreakEven: boolean
  }> => {
    if (!results) return []
    
    const projections: Array<{
      month: number
      monthlyProfit: number
      cumulativeProfit: number
      isBreakEven: boolean
    }> = []
    let cumulativeProfit = -watchedValues.equipmentCost // Start with negative initial investment
    
    for (let month = 1; month <= Math.min(watchedValues.termMonths, 36); month++) {
      cumulativeProfit += monthlyProfit
      const previousProfit = projections[projections.length - 1]?.cumulativeProfit ?? -watchedValues.equipmentCost
      projections.push({
        month,
        monthlyProfit,
        cumulativeProfit,
        isBreakEven: cumulativeProfit >= 0 && previousProfit < 0
      })
    }
    
    return projections
  }

  const projections = generateProjections()

  return (
    <div className={className}>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Input Form */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Calculator className="h-5 w-5 text-primary" />
              Equipment ROI Calculator
            </CardTitle>
            <CardDescription>
              Calculate return on investment, payback period, and revenue projections for equipment purchases.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <Input
                label="Equipment Cost"
                type="number"
                prefix="$"
                error={errors.equipmentCost?.message}
                {...register('equipmentCost', { valueAsNumber: true })}
              />
              
              <div className="space-y-2">
                <label className="text-sm font-medium">Equipment Type</label>
                <select
                  className="calculator-input flex h-12 w-full rounded-lg border border-input bg-background px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
                  {...register('equipmentType')}
                >
                  {equipmentTypes.map((type) => (
                    <option key={type} value={type}>{type}</option>
                  ))}
                </select>
              </div>
            </div>

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <Input
                label="Monthly Revenue Generated"
                type="number"
                prefix="$"
                error={errors.monthlyRevenue?.message}
                {...register('monthlyRevenue', { valueAsNumber: true })}
              />
              
              <Input
                label="Monthly Operating Expenses"
                type="number"
                prefix="$"
                error={errors.monthlyExpenses?.message}
                {...register('monthlyExpenses', { valueAsNumber: true })}
              />
            </div>

            <div>
              <Slider
                label="Analysis Period"
                value={[watchedValues.termMonths]}
                onValueChange={(value) => setValue('termMonths', value[0])}
                min={12}
                max={120}
                step={12}
                formatValue={(value) => `${value} months (${(value / 12).toFixed(1)} years)`}
              />
            </div>

            <div className="p-4 bg-muted rounded-lg">
              <div className="text-sm text-muted-foreground mb-2">Profit Summary</div>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <div className="font-medium">Monthly Profit</div>
                  <div className={monthlyProfit >= 0 ? 'text-green-600' : 'text-red-600'}>
                    {formatCurrency(monthlyProfit)}
                  </div>
                </div>
                <div>
                  <div className="font-medium">Annual Profit</div>
                  <div className={annualProfit >= 0 ? 'text-green-600' : 'text-red-600'}>
                    {formatCurrency(annualProfit)}
                  </div>
                </div>
              </div>
            </div>

            <div className="text-xs text-muted-foreground space-y-1">
              <div>• Revenue: Income generated by using this equipment</div>
              <div>• Expenses: Operational costs (maintenance, fuel, labor, etc.)</div>
              <div>• Analysis shows equipment&apos;s financial performance over time</div>
            </div>
          </CardContent>
        </Card>

        {/* Results Display */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="h-5 w-5 text-accent" />
              ROI Analysis
            </CardTitle>
          </CardHeader>
          <CardContent>
            {results ? (
              <div className="space-y-4">
                  <div className="grid grid-cols-1 gap-4">
                    {/* ROI Display */}
                    <div className={`p-6 rounded-xl text-white ${
                      results.roi >= 20 ? 'bg-gradient-to-r from-green-500 to-emerald-500' :
                      results.roi >= 10 ? 'bg-gradient-to-r from-blue-500 to-cyan-500' :
                      results.roi >= 0 ? 'bg-gradient-to-r from-yellow-500 to-orange-500' :
                      'bg-gradient-to-r from-red-500 to-pink-500'
                    }`}>
                      <div className="flex items-center gap-2 mb-2">
                        <Target className="h-5 w-5" />
                        <span className="text-sm opacity-90">Return on Investment</span>
                      </div>
                      <div className="text-3xl font-bold">{formatPercentage(results.roi)}</div>
                      <div className="text-sm opacity-90 mt-1">
                        {results.roi >= 20 ? 'Excellent ROI' :
                         results.roi >= 10 ? 'Good ROI' :
                         results.roi >= 0 ? 'Positive ROI' :
                         'Negative ROI'}
                      </div>
                    </div>

                    <div className="grid sm:grid-cols-2 gap-2">
                      <a href="/contact" className="h-11 rounded-lg bg-gradient-to-r from-blue-500 to-green-500 text-white font-medium flex items-center justify-center">Contact a Lender</a>
                      <a href="/resources" className="h-11 rounded-lg border flex items-center justify-center">Learn About Financing</a>
                    </div>

                    <div className="grid grid-cols-2 gap-3">
                      <div className="bg-card border rounded-lg p-4">
                        <div className="text-xs text-muted-foreground mb-1">Payback Period</div>
                        <div className="text-lg font-semibold text-blue-600">
                          {results.paybackMonths > 0 && results.paybackMonths < 1000 
                            ? `${results.paybackMonths.toFixed(1)} months`
                            : 'Never breaks even'
                          }
                        </div>
                      </div>
                      <div className="bg-card border rounded-lg p-4">
                        <div className="text-xs text-muted-foreground mb-1">Break-even Month</div>
                        <div className="text-lg font-semibold text-green-600">
                          {results.breakEvenMonth > 0 && results.breakEvenMonth <= watchedValues.termMonths
                            ? `Month ${results.breakEvenMonth}`
                            : 'Beyond analysis period'
                          }
                        </div>
                      </div>
                    </div>

                    <div className="grid grid-cols-2 gap-3">
                      <div className="bg-card border rounded-lg p-4">
                        <div className="text-xs text-muted-foreground mb-1">Total Revenue</div>
                        <div className="text-lg font-semibold">
                          {formatCurrency(results.totalRevenue)}
                        </div>
                      </div>
                      <div className="bg-card border rounded-lg p-4">
                        <div className="text-xs text-muted-foreground mb-1">Net Profit</div>
                        <div className={`text-lg font-semibold ${results.netProfit >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {formatCurrency(results.netProfit)}
                        </div>
                      </div>
                    </div>

                    <Button
                      variant="outline"
                      onClick={() => setShowProjections(!showProjections)}
                      className="w-full"
                    >
                      <BarChart3 className="h-4 w-4 mr-2" />
                      {showProjections ? 'Hide' : 'View'} Monthly Projections
                    </Button>

                    <AnimatePresence>
                      {showProjections && (
                        <motion.div
                          initial={{ height: 0, opacity: 0 }}
                          animate={{ height: 'auto', opacity: 1 }}
                          exit={{ height: 0, opacity: 0 }}
                          className="overflow-hidden"
                        >
                          <div className="border rounded-lg p-4 max-h-64 overflow-y-auto">
                            <div className="text-sm font-medium mb-3">Cumulative Profit Projection</div>
                            <div className="space-y-2">
                              {projections.slice(0, 24).map((projection, index) => (
                                <div 
                                  key={index} 
                                  className={`flex justify-between text-xs p-2 rounded ${
                                    projection.isBreakEven ? 'bg-green-100 border border-green-300' :
                                    projection.cumulativeProfit >= 0 ? 'bg-green-50' :
                                    'bg-red-50'
                                  }`}
                                >
                                  <span>Month {projection.month}</span>
                                  <span>{formatCurrency(projection.monthlyProfit)}</span>
                                  <span className={`font-semibold ${
                                    projection.cumulativeProfit >= 0 ? 'text-green-600' : 'text-red-600'
                                  }`}>
                                    {formatCurrency(projection.cumulativeProfit)}
                                    {projection.isBreakEven && ' 🎯'}
                                  </span>
                                </div>
                              ))}
                              {projections.length > 24 && (
                                <div className="text-xs text-center text-muted-foreground pt-2">
                                  ... and {projections.length - 24} more months
                                </div>
                              )}
                            </div>
                          </div>
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </div>
              </div>
            ) : (
              <div className="text-center py-8 text-muted-foreground">
                Enter equipment details to see ROI analysis
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  )
}